# This is a basic workflow to help you get started with Actions

name: Deploy bigbang with microk8s

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a set of commands using the runners shell
      - name: Install k3d
        run: |
          sudo apt-get update
          sudo apt-get install curl unzip
          sudo snap install microk8s --classic --channel=1.21
          microk8s enable metallb
          sudo usermod -a -G microk8s $USER
          sudo chown -f -R $USER ~/.kube
          su - $USER
          curl -OL https://releases.hashicorp.com/terraform/1.0.4/terraform_1.0.4_linux_amd64.zip
          unzip terraform_1.0.4_linux_amd64.zip
          sudo mv terraform /usr/local/bin/
          sudo chmod a+xr /usr/local/bin/terraform
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo mv kubectl /usr/local/bin/kubectl
          sudo chmod a+xr /usr/local/bin/kubectl
          k3d cluster create --k3s-server-arg "--disable=traefik" -p 80:80@loadbalancer -p 443:443@loadbalancer
          cat << EOF > terraform.tfvars
          registry1_username="${{ secrets.BBUSER }}"
          registry1_password="${{ secrets.BBPASS }}"
          EOF
          microk8s status --wait-ready
          terraform init -input=false
          terraform apply -input=false -auto-approve
          kubectl get deploy -o name -n flux-system | xargs -n1 -t kubectl rollout status -n flux-system
          kubectl wait kustomization environment --for=condition=Ready=true  -n bigbang --timeout=300s
          kubectl wait hr bigbang --for=condition=Ready=true  -n bigbang --timeout=300s
          kubectl wait hr istio --for=condition=Ready=true  -n bigbang --timeout=300s
          kubectl wait hr minio --for=condition=Ready=true  -n bigbang --timeout=300s
          while : ; do
            kubectl wait po --for=condition=Ready=true  -l app=public-ingressgateway -n istio-system --timeout=60s && break
            kubectl describe po -l app=public-ingressgateway -n minio
            sleep 5
          done
          while : ; do
            kubectl wait po --for=condition=Ready=true  -l app=minio-minio-minio-instance -n minio --timeout=60s && break
            kubectl describe po -l app=minio-minio-minio-instance -n minio
            sleep 5
          done
          kubectl get hr,po,svc -A
      - name: Verify ingress connects
        run: |
          curl -v https://minio.bigbang.dev
