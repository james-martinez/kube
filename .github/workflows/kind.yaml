# This is a basic workflow to help you get started with Actions

name: Deploy bigbang with kind

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a set of commands using the runners shell
      - name: Install kind
        run: |
          export registry1_user="${{ secrets.BBUSER }}"
          export registry1_token="${{ secrets.BBPASS }}"
          export registry1_email="${{ secrets.BBUSER }}@email.com"
          sudo apt-get update
          sudo apt-get install curl
          curl -OL https://github.com/kubernetes-sigs/kind/releases/download/v0.17.0/kind-linux-amd64
          sudo mv kind-linux-amd64 /usr/local/bin/kind
          sudo chmod a+xr /usr/local/bin/kind
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo mv kubectl /usr/local/bin/kubectl
          sudo chmod a+xr /usr/local/bin/kubectl
          curl -LOs https://github.com/mikefarah/yq/releases/download/v4.29.2/yq_linux_amd64
          sudo mv yq_linux_amd64 /usr/local/bin/yq
          sudo chmod a+xr /usr/local/bin/yq
          cat <<EOF | kind create cluster --config=-
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
          - role: control-plane
            kubeadmConfigPatches:
            - |
              kind: InitConfiguration
              nodeRegistration:
                kubeletExtraArgs:
                  node-labels: "ingress-ready=true"
            extraPortMappings:
            - containerPort: 80
              hostPort: 80
              protocol: TCP
            - containerPort: 443
              hostPort: 443
              protocol: TCP
          EOF
          kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.13.7/config/manifests/metallb-frr.yaml
          kubectl rollout status deployment/controller -n metallb-system --timeout 120s
          kubectl rollout status daemonset/speaker -n metallb-system --timeout 120s
          cat <<EOF | kubectl apply -f=-
          apiVersion: metallb.io/v1beta1
          kind: IPAddressPool
          metadata:
            name: example
            namespace: metallb-system
          spec:
            addresses:
            - 172.18.0.2-172.18.0.10
          ---
          apiVersion: metallb.io/v1beta1
          kind: L2Advertisement
          metadata:
            name: empty
            namespace: metallb-system
          EOF
          kubectl create namespace flux-system
          kubectl create secret docker-registry private-registry  --docker-server="registry1.dso.mil" --docker-username="$registry1_user" --docker-password="$registry1_token" --docker-email="$registry1_email" -n flux-system
          echo "${{ secrets.AGEKEY }}" | kubectl create secret generic sops-age --namespace=flux-system --from-file=age.agekey=/dev/stdin
          kubectl apply -k "https://repo1.dso.mil/platform-one/big-bang/bigbang.git//base/flux?ref=master"
          kubectl create namespace bigbang
          curl -sO https://repo1.dso.mil/platform-one/big-bang/bigbang/-/raw/master/chart/ingress-certs.yaml
          yq ea '. as $item ireduce ({}; . * $item )' bigbang/values.yaml  ingress-certs.yaml > values-merged.yaml
          yq  '.registryCredentials.username = strenv(registry1_user) | .registryCredentials.password = strenv(registry1_token) | .registryCredentials.email = strenv(registry1_email)' values-merged.yaml >  values-filled.yaml
          kubectl create secret generic terraform -n bigbang --from-file=values.yaml=values-filled.yaml
          kubectl apply -k "https://repo1.dso.mil/platform-one/big-bang/bigbang.git//base?ref=master"
          kubectl get deploy -o name -n flux-system | xargs -n1 -t kubectl rollout status -n flux-system
          kubectl wait hr bigbang --for=condition=Ready=true  -n bigbang --timeout=300s
          kubectl wait hr istio --for=condition=Ready=true  -n bigbang --timeout=300s
          kubectl wait hr minio --for=condition=Ready=true  -n bigbang --timeout=600s
      - name: Verify ingress connects
        run: |
          curl -v https://kiali.localhost.direct
